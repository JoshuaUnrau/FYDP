#!/usr/bin/env python

import rospy
from std_msgs.msg import String
from std_msgs.msg import Int32
from geometry_msgs.msg import Twist
from enum import IntEnum
import serial 
import time
#

print("Connecting to ardunio")
arduino = serial.Serial('/dev/ttyUSB0', 57600, timeout=1)


#arduino = serial.Serial('/dev/ttyUSB2', 57600, timeout=1)
#Check usb devices:
#sudo udevadm monitor -u
#lsusb -t
#ls -l /dev/ttyUSB
#fuser -k /dev/ttyUSB9
#10% overestimation
print("Connected to ardunio")
i = 0
#2000 seems to be the best tare value
while True:
    try:
        data = arduino.readline()
        #print(int(data)/1.1)
        
        #Prepend text strings with s
        if data[0] != 's':
            try:
                values = data.split(",")
                load_cell_1 = int(values[0])
                load_cell_2 = int(values[1])
                load_cell_3 = int(values[2])
                print(str(load_cell_1) + ", "+str(load_cell_2)+", "+str(load_cell_3))
            except:
                print("Values parse error")
        else:
            print(data)
    except Exception as e:
        time.sleep(1)d
        print("Exception with ardunio connection: " + str(e))


def servo_pub():
    rospy.init_node('servo_test', anonymous=True)
    rate = rospy.Rate(10) # 10hz
    gripper_state_test = Int32()
    gripper_state_test =  20

    while not rospy.is_shutdown():
        # test_vel = 1
        # hello_str = "hello world %s" % rospy.get_time()
        # rospy.loginfo("Testing vel", vel_msg)
        print("Test Gripper state", gripper_state_test)
        pub.publish(gripper_state_test)
        rate.sleep()

if __name__ == '__main__':
    try:
        servo_pub()
    except rospy.ROSInterruptException:
        pass
